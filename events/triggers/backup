#!/usr/bin/env bash

UMBREL_ROOT="$(readlink -f $(dirname "${BASH_SOURCE[0]}")/../..)"
BACKUP_ROOT="${UMBREL_ROOT}/.backup"
BACKUP_ID="1234567890"
BACKUP_KEY="abcdefghi"
BACKUP_FILE="${UMBREL_ROOT}/backup.tar.gz.gpg"

# Make sure an update is not in progres
if [[ -f "${UMBREL_ROOT}/statuses/backup-in-progress" ]]; then
    echo "A backup is already in progress. Exiting now."
    exit 1
fi

echo "Creating lock..."
touch "${UMBREL_ROOT}/statuses/backup-in-progress"

[[ -f "${UMBREL_ROOT}/.env" ]] && source "${UMBREL_ROOT}/.env"
BITCOIN_NETWORK=${BITCOIN_NETWORK:-mainnet}

[[ -d "${BACKUP_ROOT}" ]] && rm -rf "${BACKUP_ROOT}"

echo "Creating backup..."

mkdir -p "${BACKUP_ROOT}"

cp --archive "${UMBREL_ROOT}/lnd/data/chain/bitcoin/${BITCOIN_NETWORK}/channel.backup" "${BACKUP_ROOT}/channel.backup"
cp --archive "${UMBREL_ROOT}/db/user.json" "${BACKUP_ROOT}/user.json"

cd "${BACKUP_ROOT}"

tar \
  --create \
  --gzip \
  --verbose \
  . \
  | gpg \
  --batch \
  --symmetric \
  --cipher-algo AES256 \
  --passphrase "${BACKUP_KEY}" \
  --output "${BACKUP_FILE}"

# To decrypt:
# cat "${BACKUP_FILE}" | gpg \
#   --batch \
#   --decrypt \
#   --passphrase "${BACKUP_KEY}" \
#   | tar \
#   --extract \
#   --verbose \
#   --gzip

BACKUP_API_URL="https://pvf3ozmmfl.execute-api.us-east-1.amazonaws.com/prod/v1/upload"

if [[ $BITCOIN_NETWORK == "testnet" ]]; then
    BACKUP_API_URL="https://as0ot0lg7h.execute-api.us-east-1.amazonaws.com/dev/v1/upload"
fi
if [[ $BITCOIN_NETWORK == "regtest" ]]; then
    BACKUP_API_URL="https://5fxwqbum7g.execute-api.us-east-1.amazonaws.com/dev/v1/upload"
fi

echo "Uploading backup..."
curl -F "file=@/${BACKUP_FILE}" "${BACKUP_API_URL}/${BACKUP_ID}"

rm -rf "${BACKUP_ROOT}"
rm -f "${BACKUP_FILE}"

echo "Removing lock..."
rm -f "${UMBREL_ROOT}/statuses/backup-in-progress"

echo "============================="
echo "===== Backup successful ====="
echo "============================="

exit 0
