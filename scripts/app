#!/usr/bin/env bash
set -euo pipefail

UMBREL_ROOT="$(readlink -f $(dirname "${BASH_SOURCE[0]}")/..)"

show_help() {
  cat << EOF
app 0.0.1

CLI for managing Umbrel apps

Usage: app <command> <app> [<arguments>]

Commands:
    install                    Pulls down images for an app and starts it
    uninstall                  Removes images and destroys all data for an app
    compose                    Passes all arguments to docker-compose
EOF
}

check_dependencies () {
  for cmd in "$@"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "This script requires \"${cmd}\" to be installed"
      exit 1
    fi
  done
}

# Check dependencies
check_dependencies docker-compose

if [ -z ${1+x} ]; then
  command=""
else
  command="$1"
fi

if [ -z ${2+x} ]; then
  app=""
else
  # TODO: make sure this app exists so we don't go doing stuff with random DIRs
  app="$2"
  app_dir="${UMBREL_ROOT}/apps/${app}"
  app_data_dir="${UMBREL_ROOT}/app-data/${app}"
fi

if [ -z ${3+x} ]; then
  args=""
else
  args="${@:3}"
fi

compose() {
  local app="${1}"
  shift
  local env_file="${UMBREL_ROOT}/.env"
  local compose_file="${app_dir}/docker-compose.yml"
  DATA_DIR="${app_data_dir}" docker-compose \
    --env-file "${env_file}" \
    --file "${compose_file}" \
    "${@}"
}

# Pulls down images for an app and starts it
if [[ "$command" = "install" ]]; then

  echo "Pulling images for ${app}..."
  compose "${app}" pull

  echo "Setting up data dir for ${app}..."
  mkdir -p "${app_data_dir}"
  if [[ -d "${app_dir}/data" ]]; then
    cp -a "${app_dir}/data/." "${app_data_dir}"
  fi

  echo "Starting app ${app}..."
  compose "${app}" up --detach

  exit
fi

# Removes images and destroys all data for an app
if [[ "$command" = "uninstall" ]]; then

  echo "Removing app images"
  compose "${app}" down --rmi all --remove-orphans

  echo "Deleting app data for ${app}..."
  if [[ -d "${app_data_dir}" ]]; then
    rm -rf "${app_data_dir}"
  fi

  exit
fi

# Passes all arguments to docker-compose
if [[ "$command" = "compose" ]]; then
  compose "${app}" ${args}

  exit
fi

# If we get here it means no valid command was supplied
# Show help and exit
show_help
exit 1
