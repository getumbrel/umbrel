#!/usr/bin/env bash

set -euo pipefail

UMBREL_ROOT="$(readlink -f $(dirname "${BASH_SOURCE[0]}")/../..)"
BACKUP_FOLDER="backup"
BACKUP_ROOT="${UMBREL_ROOT}/${BACKUP_FOLDER}"
BACKUP_FILE="${UMBREL_ROOT}/backup.tar.gz.pgp"

# Deterministically derives 128 bits of cryptographically secure entropy
derive_entropy () {
  identifier="${1}"

  # This should be a random seed derived from the user's Umbrel mnemonic
  umbrel_seed="0000000000000000000000000000000000000000000000000000000000000000"

  if [[ -z "$umbrel_seed" ]] || [[ -z "$identifier" ]]; then
    echo "Missing derivation parameter, this is unsafe, exiting."
    exit 1
  fi

  # We need `sed 's/^.* //'` to trim the "(stdin)= " prefix from some versions of openssl
  echo -n "${identifier}" | openssl dgst -sha256 -hmac "${umbrel_seed}" | sed 's/^.* //'
}

# Make sure an update is not in progres
if [[ -f "${UMBREL_ROOT}/statuses/backup-in-progress" ]]; then
    echo "A backup is already in progress. Exiting now."
    exit 1
fi

echo "Creating lock..."
touch "${UMBREL_ROOT}/statuses/backup-in-progress"

[[ -f "${UMBREL_ROOT}/.env" ]] && source "${UMBREL_ROOT}/.env"
BITCOIN_NETWORK=${BITCOIN_NETWORK:-mainnet}

[[ -d "${BACKUP_ROOT}" ]] && rm -rf "${BACKUP_ROOT}"

echo "Deriving keys..."

backup_id=$(derive_entropy "umbrel_backup_id")
encryption_key=$(derive_entropy "umbrel_backup_encryption_key")

echo "Creating backup..."

mkdir -p "${BACKUP_ROOT}"

cp --archive "${UMBREL_ROOT}/lnd/data/chain/bitcoin/${BITCOIN_NETWORK}/channel.backup" "${BACKUP_ROOT}/channel.backup"
cp --archive "${UMBREL_ROOT}/db/user.json" "${BACKUP_ROOT}/user.json"

echo "Adding random padding..."

# Up to 10KB of random binary data
padding="$(shuf -i 0-10240 -n 1)"
dd if=/dev/urandom bs="${padding}" count=1 > "${BACKUP_ROOT}/.padding"

echo "Creating encrypted tarball..."

tar \
  --create \
  --gzip \
  --verbose \
  --directory "${UMBREL_ROOT}" \
  "${BACKUP_FOLDER}" \
  | gpg \
  --batch \
  --symmetric \
  --cipher-algo AES256 \
  --passphrase "${encryption_key}" \
  --output "${BACKUP_FILE}"

# To decrypt:
# cat "${BACKUP_FILE}" | gpg \
#   --batch \
#   --decrypt \
#   --passphrase "${encryption_key}" \
#   | tar \
#   --extract \
#   --verbose \
#   --gzip

BACKUP_API_URL="https://pvf3ozmmfl.execute-api.us-east-1.amazonaws.com/prod/v1/upload"

if [[ $BITCOIN_NETWORK == "testnet" ]]; then
    BACKUP_API_URL="https://as0ot0lg7h.execute-api.us-east-1.amazonaws.com/dev/v1/upload"
fi
if [[ $BITCOIN_NETWORK == "regtest" ]]; then
    BACKUP_API_URL="https://5fxwqbum7g.execute-api.us-east-1.amazonaws.com/dev/v1/upload"
fi

echo "Uploading backup..."
curl -F "file=@/${BACKUP_FILE}" "${BACKUP_API_URL}/${backup_id}"
echo

rm -rf "${BACKUP_ROOT}"
rm -f "${BACKUP_FILE}"

echo "Removing lock..."
rm -f "${UMBREL_ROOT}/statuses/backup-in-progress"

echo "============================="
echo "===== Backup successful ====="
echo "============================="

exit 0
