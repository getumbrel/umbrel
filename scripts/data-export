#!/usr/bin/env bash

# This script is exposed via: curl -sL https://export.umbrel.sh | sudo bash
# Which resolves to this file at the 1.1.1 tag in this repo

set -euo pipefail

# Dependencies: jq, rsync, lsblk, mount, umount, cifs-utils, sshpass, parted, wipefs, mkfs.ext4, docker

check_root() {
  if [[ $UID != 0 ]]; then
    echo "This script must be run as root"
    exit 1
  fi
}

check_dependencies () {
  for cmd in "$@"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "This script requires \"${cmd}\" to be installed"
      exit 1
    fi
  done
}

confirm_value_with_user() {
    local prompt="${1}"
    local default_value="${2}"
    local user_input
    read -p "$prompt " user_input </dev/tty
    if [[ -z "$user_input" ]]; then
        echo "$default_value"
    else
        echo "$user_input"
    fi
}

select_backup_method() {
    echo "Select your backup method:"
    echo "  1) USB"
    echo "  2) SMB"
    echo "  3) SCP"
    local choice
    read -p "Enter your choice (1-3): " choice
    case $choice in
        1) backup_to_usb ;;
        2) backup_to_smb ;;
        3) backup_to_scp ;;
        *) echo "Invalid selection, exiting."; exit 1 ;;
    esac
}

find_umbrel_install() {
    local service_file_path="/etc/systemd/system/umbrel-startup.service"
    if [[ ! -f "${service_file_path}" ]]; then
        echo "Error: Umbrel installation not found"
        exit 1
    fi
    local umbrel_install=$(grep '^ExecStart=' "${service_file_path}")
    umbrel_install="${umbrel_install#ExecStart=}"
    umbrel_install="${umbrel_install%/scripts/start}"
    echo "${umbrel_install}"
}

backup_to_usb() {
    echo "Searching for USB storage devices..."
    local usb_storage_devices=$(lsblk --output NAME,TRAN --json | jq -r '.blockdevices[] | select(.tran=="usb") | .name')
    local largest_usb_size_bytes="0"
    local default_usb_device=""
    for device in $usb_storage_devices; do
        local usb_device="/dev/${device}"
        local usb_name=$(cat "/sys/block/${device}/device/vendor")" "$(cat "/sys/block/${device}/device/model")
        local usb_size=$(lsblk --nodeps --noheadings --output SIZE --bytes "${usb_device}")
        echo "  - ${usb_device} (${usb_name} ${usb_size})"
        if [[ $usb_size -gt $largest_usb_size_bytes ]]; then
            largest_usb_size_bytes="${usb_size}"
            default_usb_device="${usb_device}"
        fi
    done

    if [[ -z "${default_usb_device}" ]]; then
        echo "No USB devices automatically found"
        exit 1
    fi

    local usb_block_device=$(confirm_value_with_user "Confirm USB storage device path:" "${default_usb_device}")
    if [[ ! -b "${usb_block_device}" ]]; then
        echo "Error: \"${usb_block_device}\" is not a valid storage device."
        exit 1
    fi

    local usb_size_bytes=$(lsblk --nodeps --noheadings --output SIZE --bytes "${usb_block_device}")
    local umbrel_install_size_bytes=$(du --bytes --max-depth 0 "${umbrel_install}" | awk '{print $1}')
    local buffer_bytes=$(( 1024 * 1024 * 1024 )) # 1GB buffer
    if [[ $usb_size_bytes -lt $(( umbrel_install_size_bytes + buffer_bytes )) ]]; then
        echo "Error: Not enough space on ${usb_block_device}."
        exit 1
    fi

    echo "Formatting USB storage device..."
    umount "${usb_block_device}"* 2> /dev/null || true
    wipefs -a "${usb_block_device}"
    parted --script "${usb_block_device}" mklabel gpt
    parted --script "${usb_block_device}" mkpart primary ext4 0% 100%
    sync
    mkfs.ext4 -F -L umbrel "${usb_block_device}1"

    echo "Mounting USB storage device..."
    local usb_mount_path=$(mktemp --directory --suffix -umbrel-usb-mount)
    mount "${usb_block_device}1" "${usb_mount_path}"

    echo "Stopping Umbrel to prepare for data export..."
    "${umbrel_install}/scripts/stop" || docker stop $(docker ps -aq) || { echo "Error: Could not stop Umbrel"; exit 1; }

    echo "Copying data to USB..."
    local temporary_copy_path="${usb_mount_path}/umbrel-data-export-temporary-${RANDOM}-$(date +%s)"
    mkdir "${temporary_copy_path}"
    rsync --archive --delete "${umbrel_install}/" "${temporary_copy_path}"
    mv "${temporary_copy_path}" "${usb_mount_path}/umbrel"

    echo "Export complete, unmounting USB storage device..."
    sync
    umount "${usb_mount_path}"

    echo "Done! Your Umbrel data has been exported to your external USB storage device."
}

backup_to_smb() {
    local smb_server=$(confirm_value_with_user "Enter SMB server address (e.g., 192.168.1.100):" "")
    local smb_share=$(confirm_value_with_user "Enter SMB share name:" "")
    local smb_user=$(confirm_value_with_user "Enter SMB username:" "")
    local smb_password=$(confirm_value_with_user "Enter SMB password:" "")

    local mount_point=$(mktemp --directory --suffix -umbrel-smb-mount)
    mount -t cifs -o username="${smb_user}",password="${smb_password}" "//${smb_server}/${smb_share}" "${mount_point}"

    echo "Exporting your Umbrel data to the SMB share, this may take a while..."
    rsync --archive --delete "${umbrel_install}/" "${mount_point}"
    sync

    echo "Export complete, unmounting SMB share..."
    umount "${mount_point}"

    echo "Done! Your Umbrel data has been exported to the SMB share."
}

backup_to_scp() {
    local scp_server=$(confirm_value_with_user "Enter SCP server address (e.g., user@192.168.1.100):" "")
    local scp_path=$(confirm_value_with_user "Enter the SCP destination path (e.g., /path/to/backup):" "")
    local scp_password=$(confirm_value_with_user "Enter your SCP password:" "")
    local scp_port=$(confirm_value_with_user "Enter SCP port (default 22):" "22")

    echo "Exporting your Umbrel data to the SCP server, this may take a while..."
    sshpass -p "${scp_password}" rsync -avz -e "ssh -p ${scp_port}" "${umbrel_install}/" "${scp_server}:${scp_path}"
    echo "Export complete."

    echo "Done! Your Umbrel data has been exported to the SCP server."
}

main() {
    check_root
    check_dependencies jq rsync lsblk mount umount cifs-utils sshpass parted wipefs mkfs.ext4 docker
    local umbrel_install=$(find_umbrel_install)
    select_backup_method
}

main
