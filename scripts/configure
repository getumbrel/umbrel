#!/usr/bin/env bash
set -e

##########################################################
################## Check dependencies ####################
##########################################################

check_dependencies () {
  for cmd in "$@"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "This script requires \"${cmd}\" to be installed"
      exit 1
    fi
  done
}

check_dependencies docker docker-compose

# Get gnu sed
gnused=sed
if [[ "$(uname)" == "Darwin" ]]; then
  if ! command -v gsed >/dev/null 2>&1; then
    echo "Error: This script requires gnu-sed!"
    echo "Install it with:"
    echo "  brew install gnu-sed"
    exit 1
  fi
  gnused=gsed
fi

# Switch to Umbrel's root directory
UMBREL_ROOT="$(dirname $(readlink -f "${BASH_SOURCE[0]}"))/.."
if [[ ! -d "$UMBREL_ROOT" ]]; then
  echo "Root dir does not exist '$UMBREL_ROOT'"
  exit 1
fi
cd "$UMBREL_ROOT"

# Configure for mainnet or testnet or regtest depending
# upon the user-supplied value of $NETWORK
BITCOIN_CHAIN="${NETWORK:-mainnet}"

if [ "$BITCOIN_CHAIN" != "mainnet" ] && [ "$BITCOIN_CHAIN" != "testnet" ] && [ "$BITCOIN_CHAIN" != "regtest" ]; then
  echo "Error: Umbrel can only be configured for mainnet (default), testnet or regtest"
  exit 1
fi

echo "Configuring Umbrel for $BITCOIN_CHAIN..."
echo 


##########################################################
############### Setup configuration files ###############
##########################################################

# Store paths to intermediary config files
BITCOIN_CONF_FILE="./templates/bitcoin.conf"
LND_CONF_FILE="./templates/lnd.conf"
TOR_CONF_FILE="./templates/torrc"
ENV_FILE="./templates/.env"

# Remove intermediary files if they exist from any
# previous unclean configuration run
[[ -f "$BITCOIN_CONF_FILE" ]] && rm -f "$BITCOIN_CONF_FILE"
[[ -f "$LND_CONF_FILE" ]] && rm -f "$LND_CONF_FILE"
[[ -f "$TOR_CONF_FILE" ]] && rm -f "$TOR_CONF_FILE"
[[ -f "$ENV_FILE" ]] && rm -f "$ENV_FILE"

# Copy template configs to intermediary configs
[[ -f "./templates/bitcoin-sample.conf" ]] && cp "./templates/bitcoin-sample.conf" "$BITCOIN_CONF_FILE"
[[ -f "./templates/lnd-sample.conf" ]] && cp "./templates/lnd-sample.conf" "$LND_CONF_FILE"
[[ -f "./templates/torrc-sample" ]] && cp "./templates/torrc-sample" "$TOR_CONF_FILE"
[[ -f "./templates/.env-sample" ]] && cp "./templates/.env-sample" "$ENV_FILE"


##########################################################
############ Generate configuration variables ############
##########################################################

# Generate RPC credentials
echo "Generating auth credentials..."
echo
BITCOIN_RPC_USER="umbrelrpc"
BITCOIN_RPC_DETAILS=$("./scripts/rpcauth.py" "$BITCOIN_RPC_USER")
BITCOIN_RPC_AUTH=$(echo "$BITCOIN_RPC_DETAILS" | head -2 | tail -1)
BITCOIN_RPC_PASS=$(echo "$BITCOIN_RPC_DETAILS" | tail -1)
BITCOIN_RPC_PORT=8332
BITCOIN_P2P_PORT=8333

# Pull Tor image and generate Tor password with the RPC Password
echo "Generating Tor password"
echo
docker-compose pull --quiet tor
TOR_PASS="$BITCOIN_RPC_PASS"
TOR_HASHED_PASS=$(docker-compose run --rm tor --quiet --hash-password "$TOR_PASS")


##########################################################
### Update config files with configuration variables #####
##########################################################

if [ "$BITCOIN_CHAIN" == "testnet" ]; then
  # Set testnet ports
  BITCOIN_RPC_PORT=18332
  BITCOIN_P2P_PORT=18333
  # Uncomment "test" block
  $gnused -i "s/\#\[test\]/\[test\]/g;" $
  # Enable testnet
  $gnused -i "s/\#testnet=1/testnet=1/g" "$BITCOIN_CONF_FILE"
  # Switch LND to testnet
  $gnused -i "s/bitcoin.mainnet=1/bitcoin.testnet=1/g;" "$LND_CONF_FILE"
  # Comment mainnet neutrino peers
  $gnused -i "s/neutrino.addpeer=bb2.breez.technology/\;neutrino.addpeer=bb2.breez.technology/g;" "$LND_CONF_FILE"
  $gnused -i "s/neutrino.addpeer=mainnet1-btcd.zaphq.io/\;neutrino.addpeer=mainnet1-btcd.zaphq.io/g;" "$LND_CONF_FILE"
  $gnused -i "s/neutrino.addpeer=mainnet2-btcd.zaphq.io/\;neutrino.addpeer=mainnet2-btcd.zaphq.io/g;" "$LND_CONF_FILE"
  # Uncomment testnet neutrino peers
  $gnused -i "s/\;neutrino.addpeer=testnet1-btcd.zaphq.io/neutrino.addpeer=testnet1-btcd.zaphq.io/g;" "$LND_CONF_FILE"
  $gnused -i "s/\;neutrino.addpeer=testnet2-btcd.zaphq.io/neutrino.addpeer=testnet2-btcd.zaphq.io/g;" "$LND_CONF_FILE"

fi

if [ "$BITCOIN_CHAIN" == "regtest" ]; then
  # Set regtest ports
  BITCOIN_RPC_PORT=18443
  BITCOIN_P2P_PORT=18444
  # Uncomment "regtest" block
  $gnused -i "s/\#\[regtest\]/\[regtest\]/g;" "$BITCOIN_CONF_FILE"
  # Enable regtest
  $gnused -i "s/\#regtest=1/regtest=1/g" "$BITCOIN_CONF_FILE"
  # Switch LND to regtest
  $gnused -i "s/bitcoin.mainnet=1/bitcoin.regtest=1/g;" "$LND_CONF_FILE"
  # Use bitcoind as the node
  $gnused -i "s/bitcoin.node=neutrino/bitcoin.node=bitcoind/g;" "$LND_CONF_FILE"
fi

# Update RPC and P2P Ports
$gnused -i "s/rpcport=<port>/rpcport="$BITCOIN_RPC_PORT"/g;" "$BITCOIN_CONF_FILE"
$gnused -i "s/port=<port>/port="$BITCOIN_P2P_PORT"/g;" "$BITCOIN_CONF_FILE"
$gnused -i "s/BITCOIN_RPC_PORT=<port>/BITCOIN_RPC_PORT="$BITCOIN_RPC_PORT"/g;" "$ENV_FILE"
$gnused -i "s/BITCOIN_P2P_PORT=<port>/BITCOIN_P2P_PORT="$BITCOIN_P2P_PORT"/g;" "$ENV_FILE"

# Add rpcauth to bitcoin.conf
$gnused -i "s/rpcauth=<rpcauth>/"$BITCOIN_RPC_AUTH"/g;" "$BITCOIN_CONF_FILE"
# Add RPC credentials to lnd.conf
$gnused -i "s/bitcoind.rpcuser=<username>/bitcoind.rpcuser="$BITCOIN_RPC_USER"/g;" "$LND_CONF_FILE"
$gnused -i "s/bitcoind.rpcpass=<password>/bitcoind.rpcpass="$BITCOIN_RPC_PASS"/g;" "$LND_CONF_FILE"
# Add RPC credentials to config
$gnused -i "s/BITCOIN_RPC_USER=<username>/BITCOIN_RPC_USER="$BITCOIN_RPC_USER"/g;" "$ENV_FILE"
$gnused -i "s/BITCOIN_RPC_PASS=<password>/BITCOIN_RPC_PASS="$BITCOIN_RPC_PASS"/g;" "$ENV_FILE"

# Add chain to config
$gnused -i "s/BITCOIN_CHAIN=<chain>/BITCOIN_CHAIN="$BITCOIN_CHAIN"/g;" "$ENV_FILE"

# Add Tor password
$gnused -i "s/HashedControlPassword <password>/HashedControlPassword "$TOR_HASHED_PASS"/g;" "$TOR_CONF_FILE"
$gnused -i "s/torpassword=<password>/torpassword="$TOR_PASS"/g;" "$BITCOIN_CONF_FILE"
$gnused -i "s/tor.password=<password>/tor.password="$TOR_PASS"/g;" "$LND_CONF_FILE"
$gnused -i "s/TOR_PASSWORD=<password>/TOR_PASSWORD="$TOR_PASS"/g;" "$ENV_FILE"
$gnused -i "s/TOR_HASHED_PASSWORD=<password>/TOR_HASHED_PASSWORD="$TOR_HASHED_PASS"/g;" "$ENV_FILE"


##########################################################
############### Performance optimizations ################
##########################################################

echo "Making performance optimizations..."
echo 

echo "Setting dbcache size..."
DBCACHE_SIZE=$(awk '/MemTotal/{printf "%d\n", ($2/2^10 * 0.5) - 300}' /proc/meminfo)
$gnused -i -e "s/dbcache=<dbcache>/dbcache=$DBCACHE_SIZE/g" "$BITCOIN_CONF_FILE"

##########################################################
############## Override main config files ################
##########################################################

mv -f "$BITCOIN_CONF_FILE" "./bitcoin/bitcoin.conf"
mv -f "$LND_CONF_FILE" "./lnd/lnd.conf"
mv -f "$TOR_CONF_FILE" "./tor/torrc"
mv -f "$ENV_FILE" "./.env"


##########################################################
################ Configuration complete ##################
##########################################################

echo "Pulling Umbrel Docker images..."
echo
docker-compose pull --quiet

echo "Umbrel has been configured successfully"
echo "You can now start Umbrel by running:"
echo "  sudo ./scripts/start"
